<indexterm significance="preferred" class="startofrange" id="npcap-indexterm"><primary>Npcap</primary></indexterm>

<sect1 id="npcap-overview">
  <title>Npcap: Nmap Project's packet sniffing library for Windows, based on WinPcap/Libpcap improved with NDIS 6 and LWF</title>

  <para>
  Npcap is an update of <ulink role="hidepdf" url="http://www.winpcap.org/">WinPcap</ulink>
  to <ulink role="hidepdf" url="https://msdn.microsoft.com/en-us/library/windows/hardware/ff565492(v=vs.85).aspx">NDIS 6 Light-Weight Filter (LWF)</ulink> technique.
  It supports <command>Windows Vista, 7, 8 and 10</command>. It is sponsored
  by the <ulink role="hidepdf" url="http://nmap.org/">Nmap Project</ulink>
  and developed by <ulink role="hidepdf" url="http://www.veotax.com/">Yang Luo</ulink>
  under <ulink role="hidepdf" url="https://www.google-melange.com/gsoc/project/details/google/gsoc2013/hsluoyz/5727390428823552">Google Summer of Code 2013</ulink> and
  <ulink role="hidepdf" url="https://www.google-melange.com/gsoc/project/details/google/gsoc2015/hsluoyz/5723971634855936">2015</ulink>.
  It also received many helpful tests from <ulink role="hidepdf" url="https://www.wireshark.org/">Wireshark</ulink>
  and <ulink role="hidepdf" url="http://www.netscantools.com/">NetScanTools</ulink>.
  </para>
</sect1>

<sect1 id="ncat-features">
  <title>Features</title>
	
  <itemizedlist>
  <listitem><para><emphasis>NDIS 6 Support</emphasis>: Npcap makes use of new LWF driver in
  Windows Vista and later (the legacy driver is used on XP). It's faster
  than the legacy <ulink role="hidepdf" url="https://msdn.microsoft.com/en-us/library/windows/hardware/ff557012(v=vs.85).aspx">NDIS 5 Intermediate</ulink>
  technique. One reason is that
  packet data stucture has changed (from <varname>NDIS_PACKET</varname> to <varname>NET_BUFFER_LIST</varname>)
  since Vista and NDIS 5 needs to handle extra packet structure conversion.</para></listitem>

  <listitem><para><emphasis>Latest libpcap API Support</emphasis>: Npcap provides support
  for the latest <ulink role="hidepdf" url="https://github.com/the-tcpdump-group/libpcap">libpcap API</ulink>
  by accepting libpcap as a <ulink role="hidepdf" url="https://git-scm.com/docs/git-submodule">Git submodule</ulink>.
  The latest libpcap 1.8.0 has integrated more fascinating features and functions than the
  <ulink role="hidepdf" url="https://www.winpcap.org/misc/changelog.htm">deprecated libpcap 1.0.0 shipped by WinPcap</ulink>.
  Moreover, since Linux already has a good support for latest libpcap API, using
  Npcap on Windows facilitates your software to base on the same API on both Windows and Linux.</para></listitem>

  <listitem><para><emphasis><quote>Admin-only Mode</quote> Support</emphasis>: Npcap supports to restrict its
  use to Administrators for safety purpose. If Npcap is installed with
  the option <quote>Restrict Npcap driver's access to Administrators only</quote> checked,
  when a non-Admin user tries to start a user software (Nmap, Wireshark, etc),
  the <ulink role="hidepdf" url="http://windows.microsoft.com/en-us/windows/what-is-user-account-control#1TC=windows-7">User Account Control (UAC)</ulink>
  dialog will prompt asking for Administrator privilege. Only when the end
  user chooses Yes, the driver can be accessed. This is similar to UNIX
  where you need root access to capture packets.</para></listitem>

  <listitem><para><emphasis><quote>WinPcap Compatible Mode</quote>
  Support</emphasis>: <quote>WinPcap Compatible Mode</quote> is used to decide whether Npcap should coexist With WinPcap or
  be compatible with WinPcap. With <quote>WinPcap Compatible Mode</quote> OFF, Npcap
  can coexist with WinPcap and share the DLL binary interface with WinPcap.
  So the applications unaware of Npcap <emphasis>SHOULD</emphasis> be able to use Npcap
  automatically if WinPcap is unavailable. The applications who knows
  Npcap's existence can choose to use Npcap or WinPcap first. The key
  about which is loaded first is DLL Search Path. With <quote>WinPcap Compatible Mode</quote> OFF, Npcap installs its DLLs into <filename>C:\Windows\System32\Npcap\</filename>
  instead of WinPcap's <filename>C:\Windows\System32\</filename>. So applications who want
  to load Npcap first must make <filename>C:\Windows\System32\Npcap\</filename> precedent
  to other paths in ways such as calling <function>SetDllDirectory</function>, etc. Another
  point is Npcap uses service name <quote>npcap</quote> instead of WinPcap's <quote>npf</quote> with
  <quote>WinPcap Compatible Mode</quote> OFF. So applications using <command>net start npf</command>
  for starting service must use <command>net start npcap</command> instead. If you want
  100% compatibility with WinPcap, you should install Npcap choosing
  <quote>WinPcap Compatible Mode</quote> (<quote>Install Npcap in WinPcap API-compatible Mode</quote>).
  In this mode, Npcap will install its Dlls in WinPcap's <filename>C:\Windows\System32\</filename>
  and use the <quote>npf</quote> service name. It's notable that before installing in
  this mode, you must uninstall WinPcap first (the installer wizard will
  prompt you that).</para></listitem>

  <listitem><para><emphasis>Loopback Packets Capture Support</emphasis>: Now Npcap is able to
  see Windows loopback packets using <ulink role="hidepdf" url="https://msdn.microsoft.com/en-us/library/windows/desktop/aa366510(v=vs.85).aspx">Windows Filtering Platform (WFP)</ulink>
  technique. After installation, Npcap will create an adapter named <quote>Npcap
  Loopback Adapter</quote> for you. If you are a Wireshark user, choose this adapter
  to capture, you will see all loopback traffic the same way as other
  non-loopback adapters. Try it by typing in commands like <command>ping 127.0.0.1</command>
  (IPv4) or <command>ping ::1</command> (IPv6).</para></listitem>

  <listitem><para><emphasis>Loopback Packets Send Support</emphasis>: Besides loopback packets
  capturing, Npcap can also send out loopback packets based on
  <ulink role="hidepdf" url="https://msdn.microsoft.com/en-us/library/windows/hardware/ff556958(v=vs.85).aspx">Winsock Kernel (WSK)</ulink>
  technique. A user software (e.g. Nmap) can just send packets
  out using <quote>Npcap Loopback Adapter</quote> like other adapters.
  <quote>Npcap Loopback Adapter</quote>
  will automatically remove the packet's Ethernet header and
  inject the payload into Windows TCP/IP stack, so this kind of loopback
  packet never go out of the machine.</para></listitem>

  <listitem><para><emphasis>Raw 802.11 Packets Capture Support</emphasis>: Npcap is able to see
  <emphasis>802.11</emphasis> packets instead of <emphasis>fake Ethernet</emphasis> packets on ordinary wireless
  adapters. You need to select the <option>Support raw 802.11 traffic (and monitor
  mode) for wireless adapters</option> option in the installation wizard to enable
  this feature. When your adapter is in <quote>Monitor Mode</quote>, Npcap will supply all
  <emphasis>802.11 data + control + management</emphasis> packets with radiotap headers. When
  your adapter is in <quote>Managed Mode</quote>, Npcap will only supply <emphasis>Ethernet</emphasis>
  packets. Npcap directly supports to use Wireshark to capture in <quote>Monitor Mode</quote>.
  Meantime, Npcap also provides the <filename>WlanHelper.exe</filename>
  tool to help you switch to <quote>Monitor Mode</quote> on your own. See more details
  about this feature in section <quote>For software that use Npcap raw 802.11
  feature</quote>. See more details about radiotap here:
  <ulink role="hidepdf" url="http://www.radiotap.org/">http://www.radiotap.org/</ulink></para></listitem>
  </itemizedlist>
</sect1>

<sect1 id="npcap-architecture">
  <title>Architecture</title>

  <para>
  Npcap tries to <emphasis>keep the original WinPcap architecture as much as possible</emphasis>.
  As the table shows, you will find it very similar with WinPcap.
  </para>
  
  <table frame='all'><title>Npcap Architecture</title>
  <tgroup cols='3' align='left' colsep='1' rowsep='1'>
  <thead>
  <row>
    <entry>Binary</entry>
    <entry>Source</entry>
    <entry>Description</entry>
  </row>
  </thead>
  <tbody>
  <row>
    <entry>wpcap.dll</entry>
    <entry>wpcap</entry>
    <entry>the libpcap API, added "loopback support" to original WinPcap</entry>
  </row>
  <row>
    <entry>Packet.dll</entry>
    <entry>packetWin7\Dll</entry>
    <entry>the Packet API for Windows, added "Admin-only Mode" to original WinPcap</entry>
  </row>
  <row>
    <entry><replaceable>npf</replaceable>.sys (or <replaceable>npcap</replaceable>.sys)</entry>
    <entry>packetWin7\npf</entry>
    <entry>the driver, ported from NDIS 5 to NDIS 6, we support two names: <replaceable>npf</replaceable> or <replaceable>npcap</replaceable>, based on whether Npcap is installed in <quote>WinPcap Compatible Mode</quote></entry>
  </row>
  <row>
    <entry>NPFInstall.exe</entry>
    <entry>packetWin7\NPFInstall</entry>
    <entry>a LWF &amp; WFP driver installation tool we added to Npcap</entry>
  </row>
  <row>
    <entry>NpcapHelper.exe</entry>
    <entry>packetWin7\Helper</entry>
    <entry>the helper program for <quote>Admin-only Mode</quote>, will run under <emphasis>Administrator</emphasis> rights</entry>
  </row>
  <row>
    <entry>WlanHelper.exe</entry>
    <entry>packetWin7\WlanHelper</entry>
    <entry>a tool is used to set/get the operation mode (like <quote>Monitor Mode</quote>) for a wireless adapter, will run under <emphasis>Administrator</emphasis> rights</entry>
  </row>
  </tbody>
  </tgroup>
  </table>

</sect1>

<sect1 id="npcap-detect">
  <title>How to detect what version Npcap/WinPcap you are using?</title>
  
  <para>
  Sometimes, our user software needs to detect the existence of Npcap/WinPcap at install-time or run-time. Although Npcap's GUI installer has the ability to handle this, you may want to handle it by yourself in some conditions, like you run Npcap installer in silent-mode.
  The run-time detection is even more useful. Your software probably has some functions that rely on Npcap's particular features (like the loopback interface). You need to know if you are running on top of Npcap or the legacy WinPcap to control whether to switch your functions on.
  Fortunately, Npcap provides you some methods to detect Npcap/WinPcap at install-time and run-time.
  </para>

  <sect2 id="npcap-detect-version">
    <title>Npcap version</title>

    <para>
    You may notice that Npcap has several version strings. The installer name can be something
	like <filename>npcap-0.07-r5.exe</filename>. <quote>0.07</quote> is the version number, and
	<quote>r5</quote> is the revision number. We use a version number less than <quote>1.00</quote>
	to imply that it's still a beta release. This naming follows the Nmap's convension. However,
	WinPcap follows a different version system. It has three dotted figures like <quote>4.1.3</quote>,
	which is more Wireshark-like. One thing you need to know here is that Npcap starts the
	development based on the latest WinPcap <quote>4.1.3</quote>. So any Npcap release is more
	<emphasis>advanced</emphasis> than WinPcap's latest release. Another thing needs to notice is
	that, the <quote>0.07</quote> version number can be obtained from the
	<function>pcap_lib_version</function> function. The <quote>r5</quote> revision number
	<emphasis>only</emphasis> appears in the installer filename, it doesn't show its existence
	in any code or functions. So you'd better not determine anything based on Npcap revision
	number. Just use the latest release.
    </para>

    <para>
    The executable file version (aka e-version in this document) is another thing we need to notice.
	A e-version has four dotted figures on Windows. Npcap's e-version is something like
	<quote>5.0.7.424</quote>. <quote>5</quote> here is used to advance Npcap version than the legacy
	WinPcap's e-version <quote>4.1.0.2980</quote> because <quote>5.0.7.424</quote> is larger than
	<quote>4.1.0.2980</quote>. The legacy WinPcap installer and Wireshark uses e-version to check
	the version of WinPcap. Usually these legacy codes don't even know Npcap. So Npcap needs to
	make them simply think Npcap is a newer version of WinPcap. <quote>0</quote> and <quote>7</quote>
	in Npcap's e-version corresponds to Npcap's version <quote>0.07</quote>. <quote>424</quote> means
	that this release is built at date <quote>4.24</quote> (aka 24th, April). When Npcap version jumps
	to a new version (like from <quote>0.06</quote> to <quote>0.07</quote>), the e-version will also
	change (like from <quote>0.6.0.301</quote> to <quote>0.7.0.424</quote>). A revision update won't
	cause a change of version or e-version.
    </para>
  </sect2>

  <sect2 id="npcap-detect-install-time">
    <title>Install-time detection</title>

    <para>
    You can check the existence of <filename>C:\Program Files\Npcap\NPFInstall.exe</filename> to
	detect Npcap's existence. If Npcap exists, you can check the file version of
	<filename>C:\Program Files\Npcap\NPFInstall.exe</filename> to detect Npcap e-version. The
	e-version also gives you the version. The NSIS code is shown below. <varname>$inst_ver</varname>
	is an e-version string like <quote>5.0.7.424</quote>
    </para>
<screen>
GetDllVersion "C:\Program Files\Npcap\NPFInstall.exe" $R0 $R1
IntOp $R2 $R0 / 0x00010000
IntOp $R3 $R0 &amp; 0x0000FFFF
IntOp $R4 $R1 / 0x00010000
IntOp $R5 $R1 &amp; 0x0000FFFF
StrCpy $inst_ver "$R2.$R3.$R4.$R5"
</screen>

    <para>
    You can check the installation options of an already installed Npcap by reading the registry
	key: <filename>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\npf</filename>
	(WinPcap compatible mode) or <filename>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\npcap</filename>
	(Non-WinPcap compatible mode). the entries like <filename>AdminOnly</filename>,
	<filename>Loopback</filename>, <filename>DltNull</filename>,<filename>Dot11Support</filename>,
	<filename>VlanSupport</filename>, <filename>WinPcapCompatible</filename>, etc. show the installation options.
	<filename>Loopback</filename> is <code>REG_SZ</code> type. A non-NULL value indicates the option is
	<emphasis>CHECKED</emphasis>. All other entries are <code>REG_DWORD</code> type. A 0x00000001 value
	indicates the option is <emphasis>CHECKED</emphasis>.
    </para>
  </sect2>

  <sect2 id="npcap-detect-run-time">
    <title>Run-time detection</title>

    <para>
    Npcap and WinPcap can be installed together on a symtem. Which capture library is used by the
	user software relies on the DLL loading path. If Npcap's <filename>wpcap.dll</filename> is loaded first, then you
	are using Npcap, vice versa. However, it's difficult and fragile to check the DLL loading path by yourself.
  Fortunately, you can use <function>pcap_lib_version</function> to get the Npcap/WinPcap version string.
  </para>

<screen>
char *pcap_version = pcap_lib_version();
printf("%s", pcap_version);
// Npcap output: "Npcap version 0.08, based on libpcap version 1.8.0"
// WinPcap output: "WinPcap version 4.1.3"
</screen>

	<para>Considering Npcap has different driver service names for different modes, we provide a
  way to get the current service name. You can query the registry key:
  <filename>HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Npcap\WinPcapCompatible</filename> for x64
  systems (or <filename>HKEY_LOCAL_MACHINE\SOFTWARE\Npcap\WinPcapCompatible</filename> for x86
  systems). If it's 1, it means Npcap is installed in <quote>WinPcap Compatible Mode</quote>. In this mode both
  <varname>npcap</varname> and <varname>npf</varname> services (drivers) are installed. If
  the key value is 0, it means Npcap is installed in <quote>Non-WinPcap Compatible Mode</quote>.
  In this mode only <varname>npcap</varname> service (driver) is installed. We
  <emphasis>recommend</emphasis> our users to use the <varname>npcap</varname> service instead
  of <varname>npf</varname>. Given that <varname>npcap</varname> service is always installed
  in both modes, a good practice is just trying the <varname>npcap</varname> service first.
  If it fails, then try the <varname>npf</varname> service. This is also what most of our users
  do in their software based on our investigation. A code sample from Nmap is
  <ulink role="hidepdf" url="https://github.com/nmap/nmap/blob/8c8e4a08c6c6b7abd2343e5921aafb6077bdb257/mswin32/winfix.cc#L322-L328">here</ulink>.
    </para>
  </sect2>
</sect1>

<sect1 id="npcap-feature-native">
  <title>For software that want to use Npcap first when Npcap and WinPcap coexist</title>

  <para>
  Prerequisite: Uncheck the <option>Install Npcap in WinPcap API-compatible Mode</option> option at
  install-time (which is by default).
  </para>

  <sect2 id="npcap-feature-native-dll">
    <title>DLL loading</title>

    <para>Npcap installs its DLLs into <filename>C:\Windows\System32\Npcap\</filename>
    instead of WinPcap's <filename>C:\Windows\System32\</filename>. Based on the design
    of <ulink role="hidepdf" url="https://msdn.microsoft.com/en-us/library/windows/desktop/ms686203(v=vs.85).aspx">DLL search path</ulink>,
    your application will use WinPcap first by default when Npcap and WinPcap coexist,
    as <filename>C:\Windows\System32\</filename> is prior to <filename>C:\Windows\System32\Npcap\</filename>.
    So when Npcap and WinPcap coexist, an application that want to use Npcap instead
    of WinPcap must make <filename>C:\Windows\System32\Npcap\</filename> precedent to the
    <filename>C:\Windows\System32\</filename> in Dll search path. here we provide ways
    to modify this search path to make your application load Npcap's DLLs first.
    Here are two conditions based on how your application links Npcap/WinPcap's library
    (<filename>wpcap.dll</filename>).</para>

    <sect3 id="npcap-feature-native-dll-implicitly">
      <title>If the application <emphasis>implicitly</emphasis> link <filename>wpcap.dll</filename>:</title>

      <para>Implicitly linking means that either you specified <filename>wpcap.lib</filename>
      in your <option>Project Properties</option> -> <option>Configuration Properties</option>
      -> <option>Linker</option> -> <option>Input</option> -> <option>Additional Dependencies</option> in Visual Studio,
      or specified <code>#pragma comment(linker, "wpcap.lib")</code> in your code.</para>
  
      <para>You need to do the following two steps:</para>

      <itemizedlist>
      <listitem><para>Specify <filename>wpcap.dll</filename> as a delay-loaded DLL: In
      Visual Studio, open the <option>Project Properties</option> window. Go to:
      <option>Configuration Properties</option> -> <option>Linker</option> -> <option>Input</option>
      -> <option>Delay Loaded Dlls</option>. Enter <filename>wpcap.dll</filename>
      in that option.</para></listitem>

      <listitem><para>Before calling any <filename>wpcap.dll</filename> functions,
      call <function>SetDllDirectory</function> to add <filename>C:\Windows\System32\Npcap\</filename>
      to DLL search path.</para></listitem>
      </itemizedlist>

      <para><ulink role="hidepdf" url="https://github.com/hsluoyz/WinDump/">Here</ulink>
      is an example called WinDump, it's a simple packet capture tool using Npcap/WinPcap.
      And <ulink role="hidepdf" url="https://github.com/hsluoyz/WinDump/commit/dffe2eaa520fc3b449ec0a90dcfa24f96359bbfa">this commit</ulink>
      makes it able to use Npcap first when Npcap and WinPcap coexist.</para>
    </sect3>

    <sect3 id="npcap-feature-native-dll-explicitly">
      <title>If the application <emphasis>explicitly</emphasis> link <filename>wpcap.dll</filename>:</title>

      <para>Explicitly linking means that you exlicitly called <function>LoadLibrary</function>
      to load <filename>wpcap.dll</filename> and called <function>GetProcAddress</function> to get the
      function pointers.</para>

      <para>You need to do the following one step:</para>

      <itemizedlist>
      <listitem><para>Before calling <function>LoadLibrary</function> to load <filename>wpcap.dll</filename>,
      call <function>SetDllDirectory</function> to add <filename>C:\Windows\System32\Npcap\</filename>
      to DLL search path.</para></listitem>
      </itemizedlist>

      <para>The function <function>init_npcap_dll_path</function> is provided in the following example:
      <ulink role="hidepdf" url="https://github.com/hsluoyz/WinDump/commit/dffe2eaa520fc3b449ec0a90dcfa24f96359bbfa">WinDump</ulink></para>
    </sect3>
  </sect2>

  <sect2 id="npcap-feature-native-servicename">
    <title>Service name</title>

    <para>Npcap uses service name <quote>npcap</quote> instead of WinPcap's <quote>npf</quote> with
    <quote>WinPcap Compatible Mode</quote> OFF. So applications using <command>net start npf</command>
    for starting service must change to this: run <command>net start npcap</command> first, if it
	fails, then try <command>net start npf</command>.</para>
  </sect2>
</sect1>

<sect1 id="npcap-feature-loopback">
  <title>For software that use Npcap loopback feature</title>

  <para>
  Prerequisite: Check the <option>Support loopback traffic ("Npcap Loopback Adapter" will be created)</option> option at install-time.
  </para>

  <para>
  Npcap's loopback adapter device is based on <quote>Microsoft KM-TEST Loopback Adapter</quote>
  (Win8 and Win10) or <quote>Microsoft Loopback Adapter</quote> (Vista, Win7). It is an Ethernet
  adapter, and Npcap has changed its behavior and rename it to <quote>Npcap Loopback Adapter</quote>,
  to make it see the real loopback traffic only. The traffic captured by original WinPcap will not appear here.
  </para>

  <para>
  The IP address of <quote>Npcap Loopback Adapter</quote> is usually like 169.254.x.x. However,
  this IP is totally meaningless. Software using Npcap should regard this interface's IP address
  as 127.0.0.1 (IPv4) and ::1 (IPv6). This work can't be done by Npcap because Windows forbids
  any IP address to be configured as 127.0.0.1 or ::1 as they're reserved.
  </para>

  <para>
  The MAC address of <quote>Npcap Loopback Adapter</quote> is usually like 02:00:4C:4F:4F:50. However,
  this address is meaningless too. Software using Npcap should think this interface doesn't own a
  MAC address, as the loopback traffic never goes to link layer. For software using Npcap to
  capture loopback traffic, the MAC addresses in captured data will be all zeros (aka 00:00:00:00:00:00).
  For software using Npcap to send loopback traffic, any MAC addresses can be specified as they
  will be ignored. But notice that ether_type in Ethernet header should be set correctly. Only <option>IPv4</option>
  and <option>IPv6</option> are accepted. Other values like <option>ARP</option> will be ignored. (You don't need an ARP request for
  loopback interface)
  </para>

  <para>
  The MTU of <quote>Npcap Loopback Adapter</quote> is hard-coded to 65536 by Npcap. Software
  using Npcap should get this value automatically and no special handling is needed. This value is
  determined personally by me and doesn't mean Windows loopback stack can only support packet size
  as large as 65536. So don't feel weird if you have captured packets whose size are larger than it.
  </para>

  <para>
  Don't try to make OID requests to <quote>Npcap Loopback Adapter</quote> except
  <varname>OID_GEN_MAXIMUM_TOTAL_SIZE</varname> (MTU). Those requests will still succeed like
  other adapters do, but they only make sense for NDIS adapters and Npcap doesn't even use the
  NDIS way to handle the loopback traffic. The only handled OID request by Npcap is
  <varname>OID_GEN_MAXIMUM_TOTAL_SIZE</varname>. If you query its value, you will always get
  65550 (65536 + 14). If you try to set its value, the operation will always fail.
  </para>

  <para>
  To conclude, a software that wants to support Npcap loopback feature should do these steps:
  </para>
  
  <itemizedlist>
  <listitem><para>Detect Npcap Loopback Adapter's presence, by reading registry value Loopback
  at key <filename>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\<replaceable>npf</replaceable></filename>
  (or <replaceable>npcap</replaceable> if you installed Npcap With <quote>WinPcap Compatible Mode</quote>
  OFF). If <filename>Loopback value</filename> exsits, it means <quote>Npcap Loopback Adapter</quote> is OK.
  Then perform the following steps.</para></listitem>

  <listitem><para>Treat the IP address of <quote>Npcap Loopback Adapter</quote> as 127.0.0.1 (IPv4) and ::1 (IPv6).</para></listitem>

  <listitem><para>Treat the MAC address of <quote>Npcap Loopback Adapter</quote> as 00:00:00:00:00:00.</para></listitem>

  <listitem><para>If you use IP Helper API to get adapter list, you will get an interface named
  like <quote>Loopback Pseudo-Interface 1</quote>. This interface is a DUMMY interface by Microsoft
  and can't be seen in NDIS layer. And it also takes the 127.0.0.1/::1 IP address. A good practice
  for software is merging the entry of <quote>Npcap Loopback Adapter</quote> and the entry of
  <quote>Loopback Pseudo-Interface 1</quote> into one entry, like what I have implemented for Nmap (see the
  <quote>Other code (for developers)</quote> part).</para></listitem>

  <listitem><para>Don't make use of OID requests for <quote>Npcap Loopback Adapter</quote>
  except <varname>OID_GEN_MAXIMUM_TOTAL_SIZE</varname> requests.</para></listitem>
  </itemizedlist>
</sect1>

<sect1 id="npcap-feature-dot11">
  <title>For software that use Npcap raw 802.11 feature</title>
  
  <para>
  Prerequisite: Check the <option>Support raw 802.11 traffic (and monitor mode) for wireless adapters</option> option at install-time.
  </para>
  
  <sect2 id="npcap-feature-dot11-steps">
    <title>Steps</title>
    <itemizedlist>
    <listitem><para>Install the latest version Npcap with the
	<option>Support raw 802.11 traffic (and monitor mode) for wireless adapters</option> option
	checked in the installation wizard. With this option checked, Npcap will see packets with
	<emphasis>Radiotap + 802.11</emphasis> headers for wireless adapters. Otherwise, Npcap
	will see packets with <emphasis>fake Ethernet</emphasis> headers for wireless adapters.</para></listitem>

    <listitem><para>Run <filename>WlanHelper.exe</filename> with <emphasis>Administrator privilege</emphasis>. Type in
	the index of your wireless adapter (usually <keycap>Enter</keycap>) and press <keycap>Enter</keycap>.
	Then type in <keycap>Enter</keycap> and press <keycap>Enter</keycap> to switch on the <quote>Monitor Mode</quote>.
	<filename>WlanHelper.exe</filename> also supports parameters to be used in an API manner, run
	<command>WlanHelper.exe -h</command> for details.</para></listitem>

    <listitem><para>An example: launch Wireshark and capture on the wireless adapter, you will
	see all 802.11 packets (<emphasis>data + control + management</emphasis>). Here you should
	make your software interact with Npcap using the WinPcap API (open the adapter, read packets,
	send packets, etc).</para></listitem>

    <listitem><para>If you need to return to <quote>Managed Mode</quote>, run <command>WlanHelper.exe</command>
	again and input the index of the adapter, then type in <keycap>Enter</keycap> and press
	<keycap>Enter</keycap> to switch off the <quote>Monitor Mode</quote>.</para></listitem>
    </itemizedlist>
  </sect2>

  <sect2 id="npcap-feature-dot11-tips">
    <title>Tips</title>
    <itemizedlist>
    <listitem><para>You need to use <filename>WlanHelper.exe</filename> tool to switch on
	the <quote>Monitor Mode</quote> in order to see <emphasis>802.11 control and management</emphasis>
	packets in Wireshark (also <emphasis>encrypted 802.11 data</emphasis> packets, you need
	to specify the decipher key in Wireshark in order to decrypt those packets), otherwise you will
	only see 802.11 data packets.</para></listitem>

    <listitem><para>Switching on the <quote>Monitor Mode</quote> will disconnect your wireless
	network from the AP, you can switch back to <quote>Managed Mode</quote> using the same
	<filename>WlanHelper.exe</filename> tool.</para></listitem>

    <listitem><para>The <filename>WlanHelper.exe</filename> tool automatically installed to your
	system path after installing Npcap.</para></listitem>
    </itemizedlist>
  </sect2>

  <sect2 id="npcap-feature-dot11-terminology">
    <title>Terminology</title>
    <para>
      <quote>Managed Mode</quote> (for Linux) = <quote>Extensible Station Mode</quote> (aka <quote>ExtSTA</quote>, for Windows)
    </para>

    <para>
      <quote>Monitor Mode</quote> (for Linux) = <quote>Network Monitor Mode</quote> (aka <quote>NetMon</quote>, for Windows)
    </para>

    <para>
      <quote>Master Mode</quote> (for Linux) = <quote>Extensible Access Point</quote> (aka <quote>ExtAP</quote>, for Windows)
    </para>
  </sect2>

  <sect2 id="npcap-feature-dot11-wlanhelper">
    <title>WlanHelper</title>
    <para>
      WlanHelper is used to set/get the operation mode (like <quote>Monitor Mode</quote>) for a wireless adapter on Windows.
	  WlanHelper tries to follow the grammar of <filename>iwconfig</filename>, a wireless management tool
	  for Linux. So if you rename <filename>WlanHelper.exe</filename> to <filename>iwconfig.exe</filename>,
	  your command lines for WlanHelper will be exactly the same with the iwconfig tool.
    </para>
	
    <sect3 id="npcap-feature-dot11-wlanhelper-usage">
      <title>WlanHelper's Usage</title>
      <para>
        Note: <command>WlanHelper</command> must run under <emphasis>Administrator privilege</emphasis>.
      </para>

      <sect4 id="npcap-feature-dot11-wlanhelper-usage-interactive">
        <title>Interactive way</title>
        <para>
          Run <command>WlanHelper</command> without parameters.
        </para>
      </sect4>

      <sect4 id="npcap-feature-dot11-wlanhelper-usage-api">
        <title>Command-line API way</title>

        <itemizedlist>
          <listitem><para>Run <command>netsh wlan show interfaces</command>, get the <option>Name</option> or <option>GUID</option> for the interface.</para></listitem>
          <listitem><para>Run <command>WlanHelper -h</command> to see the man page.</para></listitem>
        </itemizedlist>
        <example id="npcap-ex-wlanhelper-man">
        <title>WlanHelper Man</title>
        <screen>
C:\> <userinput>WlanHelper.exe</userinput>
WlanHelper for Npcap 0.07 (http://npcap.org)
Usage: WlanHelper {Interface Name or GUID} [Options]
Options:
  mode: get interface operation mode
  mode &lt;managed|monitor|master|wfd_device|wfd_owner|wfd_client&gt;: set interface operation mode
  modes: get all operation modes supported by the interface, comma-separated
  channel: get interface channel
  channel &lt;1-11&gt;: set interface channel (only works at monitor mode)
  freq: get interface frequency
  freq &lt;0-200&gt;: set interface frequency (only works at monitor mode)
Operation Modes:
  managed - the Extensible Station (ExtSTA) operation mode
  monitor - the Network Monitor (NetMon) operation mode
  master - the Extensible Access Point (ExtAP) operation mode (supported for Windows 7 and later)
  wfd_device - the Wi-Fi Direct Device operation mode (supported for Windows 8 and later)
  wfd_owner - the Wi-Fi Direct Group Owner operation mode (supported for Windows 8 and later)
  wfd_client - the Wi-Fi Direct Client operation mode (supported for Windows 8 and later)
Examples:
  WlanHelper wi-fi mode
  WlanHelper 42dfd47a-2764-43ac-b58e-3df569c447da channel 11
  WlanHelper 42dfd47a-2764-43ac-b58e-3df569c447da freq 2
See the MAN Page (https://github.com/nmap/npcap) for more options and examples
        </screen>
        </example>
        <para>
          An example:
        </para>
        <example id="npcap-ex-wlanhelper-api">
        <title>WlanHelper API Usage</title>
        <screen>
C:\> <userinput>netsh wlan show interfaces</userinput>

There is 1 interface on the system:

    Name                   : <replaceable>Wi-Fi</replaceable>
    Description            : Qualcomm Atheros AR9485WB-EG Wireless Network Adapter
    GUID                   : <replaceable>42dfd47a-2764-43ac-b58e-3df569c447da</replaceable>
    Physical address       : a4:db:30:d9:3a:9a
    State                  : connected
    SSID                   : LUO-PC_Network
    BSSID                  : d8:15:0d:72:8c:18
    Network type           : Infrastructure
    Radio type             : 802.11n
    Authentication         : WPA2-Personal
    Cipher                 : CCMP
    Connection mode        : Auto Connect
    Channel                : 1
    Receive rate (Mbps)    : 150
    Transmit rate (Mbps)   : 150
    Signal                 : 100%
    Profile                : LUO-PC_Network

    Hosted network status  : Not available

C:\> <userinput>WlanHelper.exe <replaceable>wi-fi</replaceable> mode</userinput>
managed
C:\> <userinput>WlanHelper.exe <replaceable>wi-fi</replaceable> mode monitor</userinput>
Success
C:\> <userinput>WlanHelper.exe <replaceable>wi-fi</replaceable> mode </userinput>
monitor
C:\> <userinput>WlanHelper.exe <replaceable>wi-fi</replaceable> mode managed</userinput>
Success
C:\> <userinput>WlanHelper.exe <replaceable>wi-fi</replaceable> mode</userinput>
managed
        </screen>
        </example>
      </sect4>
    </sect3>
  </sect2>

  <sect2 id="npcap-feature-dot11-wireshark">
    <title>How to use Wireshark to capture raw 802.11 traffic in <quote>Monitor Mode</quote></title>

    <para>
    The latest Wireshark has already integrated the support for Npcap's <quote>Monitor Mode</quote> capture.
	If you want to use Wireshark to capture raw 802.11 traffic in <quote>Monitor Mode</quote>, you need to
	<emphasis>switch on the monitor mode inside the Wireshark UI instead of using WlanHelper</emphasis>.
	This is because Wireshark only recognizes the monitor mode set by itself. So when you turn
	on monitor mode outside Wireshark (like in <filename>WlanHelper</filename>), Wireshark will not know the adapter
	has been in monitor mode, and will still try to capture in Ethernet mode, which will get no traffic.
	So after all, the correct steps are:
    </para>

	<itemizedlist>
    <listitem><para>Install latest version Wireshark and latest version Npcap with
	<option>Support raw 802.11 traffic</option> option checked.</para></listitem>

    <listitem><para>Launch Wireshark QT UI (GTK version is similar), go to <quote>Capture options</quote>.
	Then toggle the checkbox in the <quote>Monitor Mode</quote> column of your wireless adapter's row.
	Click the <quote>Start</quote> button. If you see a horizontal line instead of the checkbox,
	then it probably means that your adapter doesn't support monitor mode. You can use the
	<filename>WlanHelper</filename> tool to double-check this fact.</para></listitem>

    <listitem><para>Stop the capture in Wireshark UI when you finishes capturing, the monitor mode
	will be turned off automatically by Npcap.</para></listitem>
    </itemizedlist>
  </sect2>
</sect1>

<sect1 id="npcap-get-code">
  <title>Get the code</title>

  <para>
  Run <command>git clone https://github.com/nmap/npcap</command>: pull this repo. This repo contains
  <ulink role="hidepdf" url="https://github.com/the-tcpdump-group/libpcap">libpcap</ulink> as a
  submodule, so make sure that you have also pulled all the submodules.
  </para>
</sect1>

<sect1 id="npcap-build">
  <title>Build</title>

  <para>
  Run <command>installer\Build.bat</command>: build all DLLs and the driver. The DLLs need to be built
  using Visual Studio 2013. And the driver needs to be built using Visual Studio 2015 with Windows SDK
  10 10586 &amp; Windows Driver Kit 10 10586. The build of <filename>wpcap.dll</filename> also requires
  to install <ulink role="hidepdf" url="https://sourceforge.net/projects/winflexbison/">Win flex-bison</ulink>.
  Please unzip the downloaded package and add the directory to the <filename>PATH</filename>
  environment variable.
  </para>
</sect1>

<sect1 id="npcap-packaging">
  <title>Packaging</title>

  <para>
  Run <command>installer\Deploy.bat</command>: copy the files from build directories to
  deployment directories and sign the files. Generate an installer named
  <filename>npcap-%VERSION%.exe</filename> using
  <ulink role="hidepdf" url="http://nsis.sourceforge.net/Main_Page">NSIS 2.51</ulink> with
  the <ulink role="hidepdf" url="http://nsis.sourceforge.net/Special_Builds#Advanced_logging">advanced logging special build</ulink>
  and <ulink role="hidepdf" url="https://github.com/hsluoyz/SysRestore">SysRestore
  plug-in (special build for Npcap)</ulink> and sign the installer.
  </para>
</sect1>

<sect1 id="npcap-symbols">
  <title>Generating debug symbols (optional)</title>

  <para>
  Run <command>installer\Deploy_Symbols.bat</command>: copy the debug symbol files (.PDB)
  from build directories to deployment directories and package them into a zip file named
  <filename>npcap-&lt;VERSION&gt;-DebugSymbols.zip</filename> using
  <ulink role="hidepdf" url="http://www.7-zip.org/">7-Zip</ulink>.
  </para>
</sect1>

<sect1 id="npcap-redistribution">
  <title>Redistribution</title>

  <para>
  (You need to first notice our <ulink role="hidepdf" url="http://www.npcap.org/">LICENSE</ulink> before distributing Npcap)
  </para>

  <para>
  The Npcap installer and uninstaller are friendly for redistribution by supporting two
  ways: <quote>GUI Mode</quote> (direct run) and <quote>Silent Mode</quote> (run with
  <option>/S</option> parameter).
  </para>

  <sect2 id="npcap-redistribution-options">
    <title>Installer options</title>
    <para>
    The installer options are used when you install Npcap. They are key-value pairs. The keys can be one of these values:
	<option>/npf_startup, /loopback_support, /dlt_null, /admin_only, /dot11_support, /vlan_support, /winpcap_mode</option>,
	representing the options in the GUI. The values can be one of these four values: <option>yes, no, enforced, disabled</option>.
	There are also some options that does not appear in GUI, which are: <option>/sign_mode</option>, its value can be
	<option>sha1</option> or <option>sha2</option>. It means the signing method for the Npcap driver. By default, we install
	SHA1 drivers on Vista, Win7, Win8, and install  SHA2 drivers on Win8, Win10. You can override this behavior by specifying this option.
    </para>
    <itemizedlist>
    <listitem><para><option>yes</option>: select the option</para></listitem>
    <listitem><para><option>no</option>: unselect the option</para></listitem>
    <listitem><para><option>enforced</option>: select the option and make it unchangable in the <quote>GUI Mode</quote></para></listitem>
    <listitem><para><option>disabled</option>: unselect the option and make it unchangable in the <quote>GUI Mode</quote></para></listitem>
    </itemizedlist>

    <para>
    An example of Npcap installer options is (for both <quote>GUI Mode</quote> and <quote>Silent Mode</quote>):
    </para>

    <para>
    <option>/npf_startup=yes /loopback_support=yes /dlt_null=no /admin_only=no /dot11_support=no /vlan_support=no /winpcap_mode=no</option>
    </para>

    <itemizedlist>
    <listitem><para><option>/npf_startup=yes</option>: Automatically start the Npcap driver at boot time</para></listitem>
    <listitem><para><option>/loopback_support=yes</option>: Support loopback traffic (<quote>Npcap Loopback Adapter</quote> will be created)</para></listitem>
    <listitem><para><option>/dlt_null=yes</option>: Use <varname>DLT_NULL</varname> as the loopback interface' link layer
	protocol instead of <varname>DLT_EN10MB</varname>, so when capturing on <quote>Npcap Loopback Adapter</quote>,
	the received packets will have <ulink role="hidepdf" url="http://www.tcpdump.org/linktypes.html">DLT_NULL</ulink>
	header instead of Ethernet header. Notice: many softwares on Windows still only support the Ethernet header,
	so don't enable this option if you have no idea whether your software supports it or not</para></listitem>
    <listitem><para><option>/admin_only=yes</option>: Restrict Npcap driver's access to Administrators only</para></listitem>
    <listitem><para><option>/dot11_support=yes</option>: Support raw 802.11 traffic (and <quote>Monitor Mode</quote>) for wireless adapters</para></listitem>
    <listitem><para><option>/vlan_support=yes</option>: Support 802.1Q VLAN tag when capturing and sending data</para></listitem>
    <listitem><para><option>/winpcap_mode=yes</option>: Install Npcap in WinPcap API-compatible Mode</para></listitem>
    <listitem><para><option>/sign_mode=sha1</option>: Install the SHA1-signed Npcap driver</para></listitem>
    </itemizedlist>
  </sect2>

  <sect2 id="npcap-redistribution-uninstall-options">
    <title>Uninstaller options</title>
    <para>
    The uninstaller options are used when you uninstall Npcap. They are key-value pairs. The keys can be one of these values:
	<option>/Q /no_kill</option>. These options are not showing in the GUI. So you have to specify them in command-line.
	<option>/Q</option> means to skip the confirmation page and finish page in the uninstall wizard. So this option is
	only meaninful for <quote>GUI Mode</quote>. It has no value. <option>/no_kill</option> means whether to kill the
	processes that are using Npcap. The value of <option>/no_kill</option> can be one of these two values: <option>yes, no</option>.
	if <option>yes</option> is specified, then Npcap uninstaller will fail if there are still applications using Npcap driver or DLLs.
	If <option>no</option> is specified, Npcap uninstaller will immediately terminate any command-line processes that are using
	Npcap (like a Nmap process that is still scanning), and wait for at most 15 seconds to gracefully terminate any GUI processes
	that are using Npcap (like Wireshark UI that is still capturing). <quote>gracefully</quote> means that if you are
	still capturing via Wireshark, Wireshark UI will prompt the user about whether to save the current capture to a pcap.
	So the user have 15 seconds to save his session. Note: although Npcap uninstaller won't terminate Wireshark UI processe
	immediately, the live capture stops immediately. This is because Wireshark UI uses command-line processes named
	<varname>dumpcap.exe</varname> to capture. And that command-line process will be terminated immediately. The default
	value for <option>/no_kill</option> is <option>no</option>.
    </para>
    <itemizedlist>
    <listitem><para><option>yes</option>: select the option</para></listitem>
    <listitem><para><option>no</option>: unselect the option</para></listitem>
    </itemizedlist>

    <para>
    An example of Npcap uninstaller options is:
    </para>

    <para>
    <option>/S /Q /no_kill=yes</option>
    </para>
  </sect2>

  <sect2 id="npcap-redistribution-options-disabled">
    <title>Disabled and enforced options for GUI Mode</title>
		
    <para>
	We may disable or enforce certain options in the installer GUI to make them unselectable. This
	usually means that those options can easily cause compatible issues and are considered
	not suitable for beginners, or we think we need to enforce some rules for the Npcap API. Advanced users can still change their states via command-line
	parameters, which is described in following sections.
    </para>

    <para>
	Fortunately, if a distributor wants to start the Npcap installer GUI and disable or enforce
	certain options for reasons like compatibility. It can also use the four value
	mechanism by setting the command-line parameters to <option>disabled</option> or <option>enforced</option>.
	For example, the following command will start an installer GUI with the
	<option>dlt_null</option> disabled and unselected:
    </para>

    <para>
    <command>npcap-<replaceable>0.08</replaceable>.exe /dlt_null=disabled</command>
    </para>
  </sect2>

  <sect2 id="npcap-redistribution-options-gui">
    <title>How to change options for GUI Mode</title>
    <para>
    Default options for Npcap installer GUI can be changed. An example is:
    </para>

    <para>
    <command>npcap-<replaceable>0.08</replaceable>.exe /npf_startup=yes /loopback_support=yes /dlt_null=no /admin_only=no /dot11_support=no /vlan_support=no /winpcap_mode=yes</command>
    </para>

    <para>
    or even simpler:
    </para>

    <para>
    <command>npcap-<replaceable>0.08</replaceable>.exe /winpcap_mode=yes</command>
    </para>

    <para>
    As the default option of <option>/winpcap_mode</option> is no. Running the installer
	directly without options will see <option>Install Npcap in WinPcap API-compatible Mode</option>
	<emphasis>UNCHECKED</emphasis> by default in the <quote>Installation Options</quote> page.
	However, the above two commands will launch the installer GUI, and in the <quote>Installation Options</quote> page, the
	<option>Install Npcap in WinPcap API-compatible Mode</option> option will be <emphasis>CHECKED</emphasis> by default.
    </para>
  </sect2>

  <sect2 id="npcap-redistribution-options-silent">
    <title>How to change options for Silent Mode</title>
    <para>
    An example of changing option feature for silent installation is:
    </para>

    <para>
    <command>npcap-<replaceable>0.08</replaceable>.exe /S /npf_startup=yes /loopback_support=yes /dlt_null=no /admin_only=no /dot11_support=no /vlan_support=no /winpcap_mode=yes</command>
    </para>

    <itemizedlist>
    <listitem><para>If you doesn't specify a paramter key, it will take the default value.
    This is the same with the GUI.</para></listitem>
    <listitem><para>The keys are <emphasis>case-insensitive</emphasis>.</para></listitem>
    <listitem><para>The values are <emphasis>case-sensitive</emphasis>, only two values are
    permitted: <option>yes</option> or <option>no</option>.</para></listitem>
    </itemizedlist>
  </sect2>

</sect1>

<sect1 id="npcap-download">
  <title>Downloads</title>

  <para>
  Latest Npcap installer: <ulink role="hidepdf" url="https://github.com/nmap/npcap/releases">Npcap Releases</ulink>
  </para>

  <para>
  Archived Npcap installers (prior to <option>0.05</option>):
  <ulink role="hidepdf" url="https://svn.nmap.org/nmap-exp/yang/NPcap-LWF/npcap_history_versions/">Npcap Releases (SVN)</ulink>
  </para>
</sect1>

<sect1 id="npcap-development">
  <title>Development</title>

  <sect2 id="npcap-sdk">
    <title>SDK</title>

    <para>
    Npcap has its own SDK for <quote>Non-WinPcap Compatible Mode</quote>.
    By using it, your software will run under <quote>Non-WinPcap Compatible Mode</quote>.
    We don't update the SDK as frequently as the binaries. The latest SDK is <ulink role="hidepdf" url="https://github.com/nmap/npcap/releases/tag/v0.07-r9">Npcap SDK 0.07 r9</ulink>.
    </para>

    <para>
    If you only want to build your software under <quote>WinPcap Compatible Mode</quote>
    (which is <emphasis>NOT</emphasis> recommended), please use the legacy
    <ulink role="hidepdf" url="http://www.winpcap.org/devel.htm">WinPcap 4.1.2 Developer's Pack</ulink> instead.
    </para>
  </sect2>

  <sect2 id="npcap-documentation">
    <title>Documentation</title>

    <para>
    This document currently only addresses the Npcap particular features. It doesn't
	show you the basics about the general WinPcap usage. As Npcap shares the libpcap
	API with WinPcap, you can always refer to the
	<ulink role="hidepdf" url="https://www.winpcap.org/docs/default.htm">WinPcap documentation</ulink>
	for general usage of Npcap.
    </para>
  </sect2>

  <sect2 id="npcap-examples">
    <title>Examples</title>

    <para>
    You can refer to <ulink role="hidepdf" url="https://github.com/nmap/npcap/tree/master/Examples">WinPcap's examples</ulink> to see the usage.
    </para>

    <para>
    I also provided an example:
	<ulink role="hidepdf" url="https://github.com/hsluoyz/UserBridge/">UserBridge</ulink>,
	which is a tool to redirect all packets from an interface to another.
    </para>
  </sect2>
</sect1>

<sect1 id="npcap-incompatible">
  <title>The list of incompatible software</title>

  <para>
  The LWF technique Npcap used is usually a cause of conflicts between the programs
  using network drivers. The incompatible result can be <emphasis>bluescreen, no adapters,
  no traffic</emphasis>, etc. The reason can <emphasis>either be Npcap's bug or the incompatible
  software's bug</emphasis>. If the latter is the case, there's nothing much can be done by
  Npcap but for youself to remove the incompatible software.
  </para>

  <para>
  The commonly seen sources of the incompatble software are <emphasis>anti-virus,
  network firewall, VPN, traffic capture</emphasis>, etc. To help you identify those
  software, We have collected the programs that have trouble with Npcap
  according to user's report, so what you need to do is to remove them if
  your Npcap doesn't work normally.
  </para>
  
  <itemizedlist>
  <listitem><para>Avaya Collaboration Services, Avaya UCA Type Library (<ulink role="hidepdf" url="https://github.com/nmap/nmap/issues/373">Wi-Fi limited connectivity</ulink>)</para></listitem>
  <listitem><para>Killer Network Manager (<ulink role="hidepdf" url="https://github.com/nmap/nmap/issues/430">BSoD</ulink>)</para></listitem>
  <listitem><para>Trend Micro OfficeScan Anti-virus (<ulink role="hidepdf" url="http://seclists.org/nmap-dev/2016/q4/25">No IP under DHCP</ulink>)</para></listitem>
  <listitem><para>Junos Pulse (<ulink role="hidepdf" url="https://github.com/nmap/nmap/issues/571">Cannot connect to any Wi-Fi network</ulink>)</para></listitem>
  <listitem><para>Netscout Sniffer Portable (<ulink role="hidepdf" url="https://github.com/nmap/nmap/issues/567">No IP stack</ulink>)</para></listitem>
  </itemizedlist>
</sect1>

<sect1 id="npcap-qa">
  <title>Q &amp; A</title>

  <itemizedlist>
  <listitem><para>Network disconnects after installing Npcap: As Microsoft states
  <ulink role="hidepdf" url="https://support.microsoft.com/en-us/kb/2019184">here</ulink>,
  <emphasis>an optional NDIS light-weight filter (LWF) driver like Npcap could cause
  90-second delay in network availability</emphasis>. Some solutions you could try
  are: 1) wait for 90 seconds; 2) disable and re-enable the adapter icon in
  <command>ncpa.cpl</command>; 3) reboot. If this doesn't help you, you should
  consider that you have <emphasis>installed some incompatible software</emphasis>.
  It can be a <emphasis>VPN, anti-virus, firewall or other network related</emphasis>
  software. We are maintaining an incompatible software list in the previous section.
  So you can uninstall all those potential software one by one, and see which one
  exactly causes the issue. Don't forget to report it to me, so I could add it to
  this list.</para></listitem>
  <listitem><para>Installation fails with error code <varname>0x8004a029</varname>:
  The cause is that you have <quote>reached the maximum number of network filter
  drivers</quote>, see solution
  <ulink role="hidepdf" url="https://social.technet.microsoft.com/Forums/windows/en-US/4deb27fc-33ce-4fc0-a26f-3fec5b57733d/is-there-a-maximum-number-of-network-filter-drivers-in-windows-7?forum=w7itpronetworking">here</ulink>.
  </para></listitem>
  </itemizedlist>
</sect1>

<sect1 id="npcap-license">
  <title>License</title>

  <para>
  See: <ulink role="hidepdf" url="https://github.com/nmap/npcap/blob/master/LICENSE">LICENSE</ulink>
  </para>
</sect1>

<sect1 id="npcap-issues">
  <title>Bug report</title>

  <para>
  Please report any bugs or issues about Npcap at:
  <ulink role="hidepdf" url="https://github.com/nmap/nmap/issues">Nmap issues on GitHub</ulink>.
  In your report, please provide your <emphasis>DiagReport</emphasis> output, user
  software version (e.g. Nmap, Wireshark), reproduce steps and other information
  you think necessary. If your issue occurs only on a special OS version (e.g. Win10
  1511, 1607), please mention it in the report.
  </para>

  <sect2 id="npcap-issues-diagreport">
    <title>Diagnostic report</title>

    <para>
    Npcap has provided a diagnostic utility called <filename>DiagReport</filename>.
	It provides a lot of information including OS metadata, Npcap related files,
	install options, registry values, services, etc. You can simply click the
	<filename>C:\Program Files\Npcap\DiagReport.bat</filename> file to run <filename>DiagReport</filename>.
	It will pop up a text report via Notepad (it's stored in: <filename>C:\Program Files\Npcap\DiagReport.txt</filename>).
	Please always submit it to us if you encounter any issues.
    </para>

    <para>
    For Vista users: <filename>DiagReport</filename> is a script written by
	<ulink role="hidepdf" url="https://msdn.microsoft.com/en-us/powershell/mt173057.aspx">Windows PowerShell</ulink>,
	and Vista doesn't have it installed by default. So if you are using Vista,
	you need to install <emphasis>PowerShell 2.0 (KB968930)</emphasis> on your
	system. Please download it <ulink role="hidepdf" url="https://www.microsoft.com/en-hk/download/details.aspx?id=9864">here for x86</ulink>
	and <ulink role="hidepdf" url="https://www.microsoft.com/en-us/download/details.aspx?id=9239">here for x64</ulink>.
	Win7 and later systems have built-in PowerShell support and don't need
	to do anything about it.
    </para>

	</sect2>
  <sect2 id="npcap-issues-installation-log">
    <title>General installation log</title>

    <para>
    Npcap keeps track of the installation in a log file:
	<filename>C:\Program Files\Npcap\install.log</filename>, please submit it
	together in your report if you encounter issues about the installation
	(e.g. the installer halts).
    </para>
  </sect2>

  <sect2 id="npcap-issues-driver-installation-log">
    <title>Driver installation log</title>

    <para>
    Npcap keeps track of the driver installation (aka commands run by
	<filename>NPFInstall.exe</filename>) in a log file:
	<filename>C:\Program Files\Npcap\NPFInstall.log</filename>, please submit
	it together in your report if you encounter issues about the driver
	installation and <quote>Npcap Loopback Adapter</quote>.
    </para>

    <para>
    There's another system-provided driver installation log in:
	<filename>C:\Windows\INF\setupapi.dev.log</filename>.
	If you encounter errors about the driver/service installation, please copy
	the Npcap-related lines out and send them together in
	your report.
    </para>
  </sect2>

  <sect2 id="npcap-issues-packet-log">
    <title>Dynamic link library (DLL) log</title>

    <para>
    If you think the dynamic link library (<filename>Packet.dll</filename>) doesn't
	function well, you can refer to <filename>Packet.dll</filename>'s log. It's
	also stored in Npcap's installation folder: <filename>C:\Program Files\Npcap\Packet.log</filename>.
	We don't enable this log feature in regular releases. You have two ways: If you
	are a Npcap developer, you can build the <filename>Packet.sln</filename> project
	with the <varname>_DEBUG_TO_FILE</varname> macro defined. If you are only a
	Npcap user, you can download the packet-debug version Npcap from our releases.
	Currently, the latest packet-debug version is
	<ulink role="hidepdf" url="https://github.com/nmap/npcap/releases/tag/v0.08-r4">Npcap 0.08 r4</ulink>.
	You can also ask me to build a packet-debug version Npcap for a specific version Npcap.
	I'll be glad to do it. Note, the (<filename>Packet.log</filename>) file is written
	in an appending manner. So you may want to delete it after an amount of time, or
	save your output to another place before it gets too large.
    </para>
  </sect2>

  <sect2 id="npcap-issues-driver-log">
    <title>Driver log</title>

    <para>
    If you think the driver doesn't function well, you can open an
	<emphasis>Administrator</emphasis> command prompt,  enter
	<command>sc query npcap</command> to query the driver status and
	<command>net start npcap</command> to start the driver (replace
	<replaceable>npcap</replaceable> with <replaceable>npf</replaceable>
	if you installed Npcap in <quote>WinPcap Compatible Mode</quote>).
	The command output will inform you whether there's an error. If
	the driver is running well, but the issue still exists, then you
	need to check the driver's log. Normal Npcap releases don't switch
	on the driver log function for performance. So you have to install
	a driver-debug version Npcap. We don't build a driver-debug version for every
	release. Currently, the latest driver-debug version is
	<ulink role="hidepdf" url="https://github.com/nmap/npcap/releases/tag/v0.08-r7">Npcap 0.08 r7</ulink>.
	If the currently available driver-debug version Npcap doesn't have your
	issue, you can ask me to build a driver-debug version Npcap for a specific
	version in mail. I'll be happy to do that. When you have got an
	appropriate driver-debug version Npcap, you need to use
	<ulink role="hidepdf" url="https://technet.microsoft.com/en-us/sysinternals/debugview.aspx">DbgView</ulink>
	to read the Windows kernel log (which contains our driver log).
	You may need to turn on DbgView before installing Npcap, if the
	error occurs when the driver loads. When done, save the DbgView
	output to a file and submit it in your report.
    </para>
  </sect2>
  <sect2 id="npcap-issues-bsod">
    <title>Blue screen of death (BSoD) dump</title>

    <para>
	If you encountered BSoD when using Npcap, please attach the minidump
	file (in <filename>C:\Windows\Minidump</filename>) to your report
	together with the Npcap version. We may ask you to provide the full
	dump (<filename>C:\Windows\MEMORY.DMP</filename>) for further troubleshooting.
    </para>
  </sect2>

</sect1>

<sect1 id="npcap-list">
  <title>Contact</title>

  <itemizedlist>
  <listitem><para><ulink role="hidepdf" url="mailto:dev@nmap.org">dev@nmap.org</ulink> (Nmap development list, this is <emphasis>preferred</emphasis>)</para></listitem>
  <listitem><para><ulink role="hidepdf" url="mailto:hsluoyz@gmail.com">hsluoyz@gmail.com</ulink> (Yang Luo's email, if your issue needs to be kept private, please contact me via this mail)</para></listitem>
  </itemizedlist>
</sect1>

